import customtkinter as ctk
from tkinter import messagebox
from tkinter.filedialog import asksaveasfilename
import gspread
import pandas as pd
from oauth2client.service_account import ServiceAccountCredentials
from google import genai
import difflib

# PDF
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle


# ---------------- GOOGLE SHEETS LOGIN ----------------
SCOPE = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
CREDS_FILE = "attendsmart.json"
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
gspread_client = gspread.authorize(creds)

MARKS_BOOK = "Student Performance 2025"
MARKS_SHEET = "performance"

marks_ws = gspread_client.open(MARKS_BOOK).worksheet(MARKS_SHEET)
marks_df = pd.DataFrame(marks_ws.get_all_records())


# ---------------- SUMMARY FUNCTIONS ------------------
def summarize_student(student_name: str, df: pd.DataFrame) -> str:
    """Summarize a single student's record dynamically, adjusting to column changes."""
    rec = df[df['Name'].str.lower() == student_name.lower()]
    if rec.empty:
        return f"No record found for '{student_name}'."

    row = rec.iloc[0]
    numeric_cols = [col for col in df.columns if pd.api.types.is_numeric_dtype(df[col])]
    text_cols = [col for col in df.columns if col not in numeric_cols + ['Name']]

    lines = [f"Student: {row['Name']}  (Grade {row.get('Grade','-')})"]

    if numeric_cols:
        marks = pd.to_numeric(row[numeric_cols], errors='coerce')
        avg = marks.mean()
        marks_str = ", ".join(f"{col}: {row[col]}" for col in numeric_cols)
        lines.append(f"Scores â€“ {marks_str}")
        lines.append(f"Average across {len(marks)} numeric fields: {avg:.1f}")

    for col in text_cols:
        if pd.notna(row[col]) and row[col] != "":
            lines.append(f"{col}: {row[col]}")
    return "\n".join(lines)


def find_closest_name(name, df):
    names = df['Name'].tolist()
    matches = difflib.get_close_matches(name, names, n=1, cutoff=0.5)
    return matches[0] if matches else None


# ---------------- PDF EXPORT -------------------------
def export_pdf(student_name, local_summary, gemini_summary, filename="AttendSmart_Report.pdf"):
    doc = SimpleDocTemplate(filename, pagesize=A4)
    story = []

    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        name="Title",
        parent=styles["Heading1"],
        fontSize=18,
        textColor=colors.HexColor("#2E86C1"),
        alignment=1,
    )
    section_style = ParagraphStyle(
        name="Section",
        parent=styles["Heading2"],
        fontSize=14,
        textColor=colors.HexColor("#1B4F72"),
    )
    normal_style = styles["Normal"]

    # Logo (replace with your logo path)
    try:
        logo = Image("icon.ico", width=100, height=100)
        logo.hAlign = "CENTER"
        story.append(logo)
    except Exception:
        story.append(Paragraph("AttendSmart", title_style))  # fallback if logo missing

    story.append(Spacer(1, 12))
    story.append(Paragraph(f"ðŸ“Š AttendSmart Report", title_style))
    story.append(Spacer(1, 20))

    # Student Info
    story.append(Paragraph(f"<b>Student:</b> {student_name}", normal_style))
    story.append(Spacer(1, 12))

    # Local Summary
    story.append(Paragraph("Excel Summary", section_style))
    for line in local_summary.split("\n"):
        story.append(Paragraph(line, normal_style))
    story.append(Spacer(1, 15))

    # Gemini Summary
    story.append(Paragraph("AttendSmart AI Summary", section_style))
    for line in gemini_summary.split("\n"):
        story.append(Paragraph(line, normal_style))
    story.append(Spacer(1, 20))

    # Footer
    footer = Paragraph("Generated by AttendSmart AI Â© 2025",
                       ParagraphStyle(name="Footer", fontSize=8,
                                      textColor=colors.grey, alignment=1))
    story.append(footer)

    doc.build(story)
    return filename


# ---------------- ACTIONS ----------------------------
def generate_summary():
    student_name = name_entry.get().strip()
    api_key = api_entry.get().strip()

    if not student_name:
        messagebox.showwarning("Input Error", "Please enter a student name.")
        return
    if not api_key:
        messagebox.showwarning("Input Error", "Please enter Gemini API key.")
        return

    closest_name = find_closest_name(student_name, marks_df)
    if not closest_name:
        messagebox.showwarning("Not Found", f"No record found for '{student_name}'.")
        return

    summary = summarize_student(closest_name, marks_df)
    local_textbox.delete("1.0", "end")
    local_textbox.insert("end", summary)

    try:
        gemini_client = genai.Client(api_key=api_key)
        response = gemini_client.models.generate_content(
            model="gemini-2.5-flash",
            contents=f"Summarize the following student data for a school and also give your idea in a short report:\n{summary}"
        )
        gemini_textbox.delete("1.0", "end")
        gemini_textbox.insert("end", response.text)
    except Exception as e:
        messagebox.showerror("AttendSmart AI Error", str(e))


def save_report():
    student_name = name_entry.get().strip()
    local_summary = local_textbox.get("1.0", "end").strip()
    gemini_summary = gemini_textbox.get("1.0", "end").strip()

    if not student_name or not local_summary:
        messagebox.showwarning("Error", "Please generate a summary first.")
        return

    filename = asksaveasfilename(defaultextension=".pdf",
                                 filetypes=[("PDF Files", "*.pdf")])
    if not filename:
        return

    try:
        export_pdf(student_name, local_summary, gemini_summary, filename)
        messagebox.showinfo("Success", f"Report saved as {filename}")
    except Exception as e:
        messagebox.showerror("Error", f"Could not save PDF:\n{e}")


def change_theme(choice):
    ctk.set_appearance_mode(choice)


# ---------------- MODERN TKINTER (CTK) ----------------
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("dark-blue")

root = ctk.CTk()
root.title("AttendSmart AI")
root.geometry("850x700")
root.minsize(500, 400)

# Header
header = ctk.CTkFrame(root, corner_radius=0)
header.pack(fill="x")

title_label = ctk.CTkLabel(header,
                           text="ðŸ“Š AttendSmart Student Summary",
                           font=("Helvetica", 18, "bold"))
title_label.pack(side="left", padx=10, pady=10)

theme_opt = ctk.CTkOptionMenu(header,
                              values=["Dark", "Light", "System"],
                              command=change_theme)
theme_opt.set("Dark")
theme_opt.pack(side="right", padx=10, pady=10)

# Input Frame
frame = ctk.CTkFrame(root)
frame.pack(padx=20, pady=10, fill="x")

ctk.CTkLabel(frame, text="Student Name:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
name_entry = ctk.CTkEntry(frame, width=300)
name_entry.grid(row=0, column=1, padx=5, pady=5)

ctk.CTkLabel(frame, text="Gemini API Key:").grid(row=1, column=0, padx=5, pady=5, sticky="w")
api_entry = ctk.CTkEntry(frame, width=300, show="*")
api_entry.grid(row=1, column=1, padx=5, pady=5)

generate_btn = ctk.CTkButton(frame,
                             text="Generate Summary",
                             command=generate_summary,
                             fg_color="#4caf50",
                             hover_color="#45a049")
generate_btn.grid(row=2, column=0, columnspan=2, pady=10)

save_btn = ctk.CTkButton(frame,
                         text="ðŸ’¾ Save Report as PDF",
                         command=save_report,
                         fg_color="#2196f3",
                         hover_color="#1976d2")
save_btn.grid(row=3, column=0, columnspan=2, pady=10)

# Summary Boxes
ctk.CTkLabel(root, text="Excel Summary:", font=("Helvetica", 14, "bold")).pack(anchor="w", padx=20, pady=(10, 2))
local_textbox = ctk.CTkTextbox(root, height=10, corner_radius=8)
local_textbox.pack(padx=20, pady=5, fill="both", expand=True)

ctk.CTkLabel(root, text="AttendSmart AI Summary:", font=("Helvetica", 14, "bold")).pack(anchor="w", padx=20, pady=(10, 2))
gemini_textbox = ctk.CTkTextbox(root, height=10, corner_radius=8)
gemini_textbox.pack(padx=20, pady=5, fill="both", expand=True)

root.mainloop()
